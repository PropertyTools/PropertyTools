<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:clr="clr-namespace:System;assembly=mscorlib"	
	xmlns:clr2="clr-namespace:System.Collections;assembly=mscorlib"
    xmlns:local="clr-namespace:OpenControls">

    <!-- CLR & Custom Types Data Templates -->

    <DataTemplate x:Key="default">
        <TextBox IsReadOnly="{Binding IsReadOnly}" 
                 IsEnabled="{Binding IsEnabled}" 
                 Text="{Binding Value, ValidatesOnDataErrors=True}">
            <!--<TextBox.Text>
                <Binding Mode="TwoWay" Path="Value" ValidatesOnDataErrors="True">
                   <Binding.ValidationRules>
                        <ExceptionValidationRule />
                    </Binding.ValidationRules>
                </Binding>
            </TextBox.Text> -->
        </TextBox>
    </DataTemplate>

    <DataTemplate x:Key="sliderBox">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="1*"/>
                <ColumnDefinition Width="1*"/>
            </Grid.ColumnDefinitions>
            <Slider 
                Maximum="{Binding SliderMaximum}"
                Minimum="{Binding SliderMinimum}"
                SmallChange="{Binding SliderSmallChange}"
                LargeChange="{Binding SliderLargeChange}"
                IsEnabled="{Binding IsEnabled}" 
                Focusable="False"
                Margin="0 0 4 0"
                Value="{Binding Value, Converter={local:ToDoubleConverter}}"
                />
            <!-- todo: need new type of binding that can bind to FormatString and 
            pass the target datatype to the converter -->
            <TextBox IsReadOnly="{Binding IsReadOnly}" 
                     IsEnabled="{Binding IsEnabled}" 
                     Grid.Column="1"
                     Text="{Binding Value, ValidatesOnDataErrors=True}"/>
        </Grid>
    </DataTemplate>

    <!-- bool -->
    <DataTemplate x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type local:PropertyEditor}, ResourceId={x:Type clr:Boolean}}">
        <CheckBox IsEnabled="{Binding IsWriteable}" IsChecked="{Binding Value}" 
                  HorizontalAlignment="Left" VerticalAlignment="Center"/>

        <!--  todo: Consider this. The alternative is to use YesNo Enum! -->
        <!-- todo: localization... -->
        <!-- <Grid>
            <CheckBox IsEnabled="{Binding IsWriteable}" IsChecked="{Binding Path=Value}" 
                  HorizontalAlignment="Left"
                  VerticalAlignment="Center"
                  Visibility="{Binding RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type local:PropertyEditor}}, Path=BoolAsCombo, Converter={local:BoolToVisibilityConverter InvertVisibility=True}}"/>
            <ComboBox IsEnabled="{Binding IsWriteable}" 
                  SelectedValuePath="Value"
                  SelectedValue="{Binding Path=Value}"
                      MinWidth="40"
                  HorizontalAlignment="Left"
                  VerticalAlignment="Center"
                  Visibility="{Binding RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type local:PropertyEditor}}, Path=BoolAsCombo, Converter={local:BoolToVisibilityConverter InvertVisibility=False}}">
                <ComboBox.ItemsSource>
                    <x:Array Type="{x:Type clr2:DictionaryEntry}">
                        <clr2:DictionaryEntry Key="Yes" Value="True" />
                        <clr2:DictionaryEntry Key="No" Value="False" />
                    </x:Array>
                </ComboBox.ItemsSource>
                <ComboBox.ItemTemplate>
                    <DataTemplate>
                        <TextBlock Text="{Binding Path=Key}"/>
                    </DataTemplate>
                </ComboBox.ItemTemplate>
            </ComboBox>
        </Grid>
        -->
    </DataTemplate>

    <!-- list -->
    <DataTemplate x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type local:PropertyEditor}, ResourceId={x:Type clr2:IList}}">
        <ListBox ItemsSource="{Binding Path=Value}" />
    </DataTemplate>

    <!-- enum -->
    <!-- <DataTemplate x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type local:PropertyEditor}, ResourceId={x:Type clr:Enum}}">-->
    <DataTemplate x:Key="enumComboBox">
        <ComboBox SelectedValue="{Binding Path=Value}" IsEnabled="{Binding IsWriteable}">
            <ComboBox.ItemsSource>
                <Binding Path="Value">
                    <Binding.Converter>
                        <local:EnumValuesConverter />
                    </Binding.Converter>
                </Binding>
            </ComboBox.ItemsSource>
        </ComboBox>
    </DataTemplate>

    <!--    
   <DataTemplate x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type local:PropertyEditor}, ResourceId={x:Type clr:Enum}}">
-->
    <DataTemplate x:Key="enumRadioButtons">
        <local:RadioButtonList Value="{Binding Value}"/>
    </DataTemplate>

</ResourceDictionary>